# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ridesharing_pb2 as ridesharing__pb2


class RideSharingStub(object):
    """RideSharing service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestRide = channel.unary_unary(
                '/ridesharing.RideSharing/RequestRide',
                request_serializer=ridesharing__pb2.RideRequest.SerializeToString,
                response_deserializer=ridesharing__pb2.RideResponse.FromString,
                )
        self.GetRideStatus = channel.unary_unary(
                '/ridesharing.RideSharing/GetRideStatus',
                request_serializer=ridesharing__pb2.RideStatusRequest.SerializeToString,
                response_deserializer=ridesharing__pb2.RideStatusResponse.FromString,
                )
        self.AcceptRide = channel.unary_unary(
                '/ridesharing.RideSharing/AcceptRide',
                request_serializer=ridesharing__pb2.AcceptRideRequest.SerializeToString,
                response_deserializer=ridesharing__pb2.AcceptRideResponse.FromString,
                )
        self.RejectRide = channel.unary_unary(
                '/ridesharing.RideSharing/RejectRide',
                request_serializer=ridesharing__pb2.RejectRideRequest.SerializeToString,
                response_deserializer=ridesharing__pb2.RejectRideResponse.FromString,
                )
        self.CompleteRide = channel.unary_unary(
                '/ridesharing.RideSharing/CompleteRide',
                request_serializer=ridesharing__pb2.RideCompletionRequest.SerializeToString,
                response_deserializer=ridesharing__pb2.RideCompletionResponse.FromString,
                )


class RideSharingServicer(object):
    """RideSharing service definition
    """

    def RequestRide(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRideStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcceptRide(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RejectRide(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompleteRide(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RideSharingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestRide': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestRide,
                    request_deserializer=ridesharing__pb2.RideRequest.FromString,
                    response_serializer=ridesharing__pb2.RideResponse.SerializeToString,
            ),
            'GetRideStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRideStatus,
                    request_deserializer=ridesharing__pb2.RideStatusRequest.FromString,
                    response_serializer=ridesharing__pb2.RideStatusResponse.SerializeToString,
            ),
            'AcceptRide': grpc.unary_unary_rpc_method_handler(
                    servicer.AcceptRide,
                    request_deserializer=ridesharing__pb2.AcceptRideRequest.FromString,
                    response_serializer=ridesharing__pb2.AcceptRideResponse.SerializeToString,
            ),
            'RejectRide': grpc.unary_unary_rpc_method_handler(
                    servicer.RejectRide,
                    request_deserializer=ridesharing__pb2.RejectRideRequest.FromString,
                    response_serializer=ridesharing__pb2.RejectRideResponse.SerializeToString,
            ),
            'CompleteRide': grpc.unary_unary_rpc_method_handler(
                    servicer.CompleteRide,
                    request_deserializer=ridesharing__pb2.RideCompletionRequest.FromString,
                    response_serializer=ridesharing__pb2.RideCompletionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ridesharing.RideSharing', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RideSharing(object):
    """RideSharing service definition
    """

    @staticmethod
    def RequestRide(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ridesharing.RideSharing/RequestRide',
            ridesharing__pb2.RideRequest.SerializeToString,
            ridesharing__pb2.RideResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRideStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ridesharing.RideSharing/GetRideStatus',
            ridesharing__pb2.RideStatusRequest.SerializeToString,
            ridesharing__pb2.RideStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AcceptRide(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ridesharing.RideSharing/AcceptRide',
            ridesharing__pb2.AcceptRideRequest.SerializeToString,
            ridesharing__pb2.AcceptRideResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RejectRide(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ridesharing.RideSharing/RejectRide',
            ridesharing__pb2.RejectRideRequest.SerializeToString,
            ridesharing__pb2.RejectRideResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CompleteRide(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ridesharing.RideSharing/CompleteRide',
            ridesharing__pb2.RideCompletionRequest.SerializeToString,
            ridesharing__pb2.RideCompletionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
